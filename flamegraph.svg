<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180"><g><title>bananagrams`&lt;ndarray::iterators::Iter&lt;A,D&gt; as core::iter::traits::iterator::Iterator&gt;::fold (53 samples, 0.21%)</title><rect x="0.4775%" y="165" width="0.2075%" height="15" fill="rgb(227,0,7)"/><text x="0.7275%" y="175.50"></text></g><g><title>bananagrams`core::iter::adapters::map_fold::_{{closure}} (27 samples, 0.11%)</title><rect x="0.5793%" y="149" width="0.1057%" height="15" fill="rgb(217,0,24)"/><text x="0.8293%" y="159.50"></text></g><g><title>bananagrams`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (220 samples, 0.86%)</title><rect x="0.2505%" y="197" width="0.8611%" height="15" fill="rgb(221,193,54)"/><text x="0.5005%" y="207.50"></text></g><g><title>bananagrams`bananagrams::Grid::fits_in_row (215 samples, 0.84%)</title><rect x="0.2701%" y="181" width="0.8416%" height="15" fill="rgb(248,212,6)"/><text x="0.5201%" y="191.50"></text></g><g><title>bananagrams`&lt;alloc::string::String as core::clone::Clone&gt;::clone (59 samples, 0.23%)</title><rect x="1.1273%" y="181" width="0.2309%" height="15" fill="rgb(208,68,35)"/><text x="1.3773%" y="191.50"></text></g><g><title>bananagrams`&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (77 samples, 0.30%)</title><rect x="1.1116%" y="197" width="0.3014%" height="15" fill="rgb(232,128,0)"/><text x="1.3616%" y="207.50"></text></g><g><title>bananagrams`mi_malloc (26 samples, 0.10%)</title><rect x="2.6147%" y="133" width="0.1018%" height="15" fill="rgb(207,160,47)"/><text x="2.8647%" y="143.50"></text></g><g><title>bananagrams`&lt;alloc::string::String as core::clone::Clone&gt;::clone (40 samples, 0.16%)</title><rect x="2.5873%" y="149" width="0.1566%" height="15" fill="rgb(228,23,34)"/><text x="2.8373%" y="159.50"></text></g><g><title>bananagrams`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (50 samples, 0.20%)</title><rect x="3.1627%" y="133" width="0.1957%" height="15" fill="rgb(218,30,26)"/><text x="3.4127%" y="143.50"></text></g><g><title>bananagrams`mi_malloc (33 samples, 0.13%)</title><rect x="3.3584%" y="133" width="0.1292%" height="15" fill="rgb(220,122,19)"/><text x="3.6084%" y="143.50"></text></g><g><title>bananagrams`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (190 samples, 0.74%)</title><rect x="2.7517%" y="149" width="0.7437%" height="15" fill="rgb(250,228,42)"/><text x="3.0017%" y="159.50"></text></g><g><title>bananagrams`&lt;ndarray::iterators::Iter&lt;A,D&gt; as core::iter::traits::iterator::Iterator&gt;::fold (356 samples, 1.39%)</title><rect x="3.4954%" y="149" width="1.3935%" height="15" fill="rgb(240,193,28)"/><text x="3.7454%" y="159.50"></text></g><g><title>bananagrams`core::iter::adapters::map_fold::_{{closure}} (195 samples, 0.76%)</title><rect x="4.1256%" y="133" width="0.7633%" height="15" fill="rgb(216,20,37)"/><text x="4.3756%" y="143.50"></text></g><g><title>bananagrams`&lt;&amp;mut W as core::fmt::Write&gt;::write_char (55 samples, 0.22%)</title><rect x="5.1707%" y="101" width="0.2153%" height="15" fill="rgb(206,188,39)"/><text x="5.4207%" y="111.50"></text></g><g><title>bananagrams`alloc::string::String::push (49 samples, 0.19%)</title><rect x="5.1941%" y="85" width="0.1918%" height="15" fill="rgb(217,207,13)"/><text x="5.4441%" y="95.50"></text></g><g><title>bananagrams`alloc::fmt::format (109 samples, 0.43%)</title><rect x="5.0023%" y="149" width="0.4266%" height="15" fill="rgb(231,73,38)"/><text x="5.2523%" y="159.50"></text></g><g><title>bananagrams`core::fmt::write (102 samples, 0.40%)</title><rect x="5.0297%" y="133" width="0.3992%" height="15" fill="rgb(225,20,46)"/><text x="5.2797%" y="143.50"></text></g><g><title>bananagrams`core::fmt::Formatter::pad (72 samples, 0.28%)</title><rect x="5.1472%" y="117" width="0.2818%" height="15" fill="rgb(210,31,41)"/><text x="5.3972%" y="127.50"></text></g><g><title>bananagrams`_mi_heap_realloc_zero (53 samples, 0.21%)</title><rect x="5.5582%" y="133" width="0.2075%" height="15" fill="rgb(221,200,47)"/><text x="5.8082%" y="143.50"></text></g><g><title>bananagrams`mi_malloc (33 samples, 0.13%)</title><rect x="5.7656%" y="133" width="0.1292%" height="15" fill="rgb(226,26,5)"/><text x="6.0156%" y="143.50"></text></g><g><title>bananagrams`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (137 samples, 0.54%)</title><rect x="5.4329%" y="149" width="0.5362%" height="15" fill="rgb(249,33,26)"/><text x="5.6829%" y="159.50"></text></g><g><title>bananagrams`mi_malloc (32 samples, 0.13%)</title><rect x="6.0983%" y="133" width="0.1253%" height="15" fill="rgb(235,183,28)"/><text x="6.3483%" y="143.50"></text></g><g><title>bananagrams`alloc::slice::_&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (73 samples, 0.29%)</title><rect x="5.9692%" y="149" width="0.2857%" height="15" fill="rgb(221,5,38)"/><text x="6.2192%" y="159.50"></text></g><g><title>bananagrams`&lt;alloc::vec::Splice&lt;I&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.16%)</title><rect x="6.3175%" y="133" width="0.1644%" height="15" fill="rgb(247,18,42)"/><text x="6.5675%" y="143.50"></text></g><g><title>bananagrams`alloc::string::String::replace_range (61 samples, 0.24%)</title><rect x="6.2549%" y="149" width="0.2388%" height="15" fill="rgb(241,131,45)"/><text x="6.5049%" y="159.50"></text></g><g><title>bananagrams`mi_malloc (37 samples, 0.14%)</title><rect x="6.8733%" y="117" width="0.1448%" height="15" fill="rgb(249,31,29)"/><text x="7.1233%" y="127.50"></text></g><g><title>bananagrams`alloc::slice::_&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (71 samples, 0.28%)</title><rect x="6.7872%" y="133" width="0.2779%" height="15" fill="rgb(225,111,53)"/><text x="7.0372%" y="143.50"></text></g><g><title>bananagrams`bananagrams::can_be_made_with (177 samples, 0.69%)</title><rect x="6.4937%" y="149" width="0.6928%" height="15" fill="rgb(238,160,17)"/><text x="6.7437%" y="159.50"></text></g><g><title>bananagrams`core::iter::adapters::map_fold::_{{closure}} (32 samples, 0.13%)</title><rect x="7.1904%" y="149" width="0.1253%" height="15" fill="rgb(214,148,48)"/><text x="7.4404%" y="159.50"></text></g><g><title>bananagrams`mi_free (57 samples, 0.22%)</title><rect x="7.3822%" y="149" width="0.2231%" height="15" fill="rgb(232,36,49)"/><text x="7.6322%" y="159.50"></text></g><g><title>bananagrams`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice (73 samples, 0.29%)</title><rect x="7.6405%" y="149" width="0.2857%" height="15" fill="rgb(209,103,24)"/><text x="7.8905%" y="159.50"></text></g><g><title>bananagrams`ndarray::dimension::do_slice (34 samples, 0.13%)</title><rect x="7.7932%" y="133" width="0.1331%" height="15" fill="rgb(229,88,8)"/><text x="8.0432%" y="143.50"></text></g><g><title>bananagrams`ndarray::iterators::Iter&lt;A,D&gt;::new (40 samples, 0.16%)</title><rect x="7.9263%" y="149" width="0.1566%" height="15" fill="rgb(213,181,19)"/><text x="8.1763%" y="159.50"></text></g><g><title>bananagrams`bananagrams::Grid::fits_in_row (1,634 samples, 6.40%)</title><rect x="1.7731%" y="165" width="6.3958%" height="15" fill="rgb(254,191,54)"/><text x="2.0231%" y="175.50">bananagr..</text></g><g><title>bananagrams`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1,679 samples, 6.57%)</title><rect x="1.6322%" y="181" width="6.5719%" height="15" fill="rgb(241,83,37)"/><text x="1.8822%" y="191.50">bananagra..</text></g><g><title>bananagrams`mi_malloc (93 samples, 0.36%)</title><rect x="8.5173%" y="149" width="0.3640%" height="15" fill="rgb(233,36,39)"/><text x="8.7673%" y="159.50"></text></g><g><title>bananagrams`&lt;alloc::string::String as core::clone::Clone&gt;::clone (214 samples, 0.84%)</title><rect x="8.2824%" y="165" width="0.8376%" height="15" fill="rgb(226,3,54)"/><text x="8.5324%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (51 samples, 0.20%)</title><rect x="8.9205%" y="149" width="0.1996%" height="15" fill="rgb(245,192,40)"/><text x="9.1705%" y="159.50"></text></g><g><title>bananagrams`&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (262 samples, 1.03%)</title><rect x="8.2042%" y="181" width="1.0255%" height="15" fill="rgb(238,167,29)"/><text x="8.4542%" y="191.50"></text></g><g><title>bananagrams`bananagrams::Grid::word_placements_for (56 samples, 0.22%)</title><rect x="9.3745%" y="181" width="0.2192%" height="15" fill="rgb(232,182,51)"/><text x="9.6245%" y="191.50"></text></g><g><title>bananagrams`__rg_dealloc (37 samples, 0.14%)</title><rect x="10.1104%" y="149" width="0.1448%" height="15" fill="rgb(231,60,39)"/><text x="10.3604%" y="159.50"></text></g><g><title>bananagrams`mi_malloc (59 samples, 0.23%)</title><rect x="13.0108%" y="117" width="0.2309%" height="15" fill="rgb(208,69,12)"/><text x="13.2608%" y="127.50"></text></g><g><title>bananagrams`&lt;alloc::string::String as core::clone::Clone&gt;::clone (101 samples, 0.40%)</title><rect x="12.9325%" y="133" width="0.3953%" height="15" fill="rgb(235,93,37)"/><text x="13.1825%" y="143.50"></text></g><g><title>bananagrams`_mi_heap_realloc_zero (78 samples, 0.31%)</title><rect x="14.6195%" y="101" width="0.3053%" height="15" fill="rgb(213,116,39)"/><text x="14.8695%" y="111.50"></text></g><g><title>bananagrams`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (124 samples, 0.49%)</title><rect x="14.4943%" y="117" width="0.4854%" height="15" fill="rgb(222,207,29)"/><text x="14.7443%" y="127.50"></text></g><g><title>bananagrams`mi_malloc (149 samples, 0.58%)</title><rect x="14.9796%" y="117" width="0.5832%" height="15" fill="rgb(206,96,30)"/><text x="15.2296%" y="127.50"></text></g><g><title>bananagrams`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (594 samples, 2.33%)</title><rect x="13.3357%" y="133" width="2.3250%" height="15" fill="rgb(218,138,4)"/><text x="13.5857%" y="143.50">b..</text></g><g><title>bananagrams`&lt;ndarray::iterators::Iter&lt;A,D&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,289 samples, 5.05%)</title><rect x="15.6646%" y="133" width="5.0454%" height="15" fill="rgb(250,191,14)"/><text x="15.9146%" y="143.50">banana..</text></g><g><title>bananagrams`core::iter::adapters::map_fold::_{{closure}} (650 samples, 2.54%)</title><rect x="18.1658%" y="117" width="2.5442%" height="15" fill="rgb(239,60,40)"/><text x="18.4158%" y="127.50">ba..</text></g><g><title>bananagrams`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (26 samples, 0.10%)</title><rect x="21.3520%" y="85" width="0.1018%" height="15" fill="rgb(206,27,48)"/><text x="21.6020%" y="95.50"></text></g><g><title>bananagrams`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (32 samples, 0.13%)</title><rect x="21.3441%" y="101" width="0.1253%" height="15" fill="rgb(225,35,8)"/><text x="21.5941%" y="111.50"></text></g><g><title>bananagrams`_mi_heap_realloc_zero (33 samples, 0.13%)</title><rect x="21.7395%" y="53" width="0.1292%" height="15" fill="rgb(250,213,24)"/><text x="21.9895%" y="63.50"></text></g><g><title>bananagrams`alloc::string::String::push (99 samples, 0.39%)</title><rect x="21.5946%" y="69" width="0.3875%" height="15" fill="rgb(247,123,22)"/><text x="21.8446%" y="79.50"></text></g><g><title>bananagrams`&lt;&amp;mut W as core::fmt::Write&gt;::write_char (108 samples, 0.42%)</title><rect x="21.5633%" y="85" width="0.4227%" height="15" fill="rgb(231,138,38)"/><text x="21.8133%" y="95.50"></text></g><g><title>bananagrams`alloc::fmt::format (243 samples, 0.95%)</title><rect x="21.0858%" y="133" width="0.9512%" height="15" fill="rgb(231,145,46)"/><text x="21.3358%" y="143.50"></text></g><g><title>bananagrams`core::fmt::write (225 samples, 0.88%)</title><rect x="21.1563%" y="117" width="0.8807%" height="15" fill="rgb(251,118,11)"/><text x="21.4063%" y="127.50"></text></g><g><title>bananagrams`core::fmt::Formatter::pad (143 samples, 0.56%)</title><rect x="21.4772%" y="101" width="0.5597%" height="15" fill="rgb(217,147,25)"/><text x="21.7272%" y="111.50"></text></g><g><title>bananagrams`mi_usable_size (49 samples, 0.19%)</title><rect x="22.9685%" y="101" width="0.1918%" height="15" fill="rgb(247,81,37)"/><text x="23.2185%" y="111.50"></text></g><g><title>bananagrams`_mi_heap_realloc_zero (199 samples, 0.78%)</title><rect x="22.4440%" y="117" width="0.7789%" height="15" fill="rgb(209,12,38)"/><text x="22.6940%" y="127.50"></text></g><g><title>bananagrams`mi_malloc (134 samples, 0.52%)</title><rect x="23.2425%" y="117" width="0.5245%" height="15" fill="rgb(227,1,9)"/><text x="23.4925%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (50 samples, 0.20%)</title><rect x="23.8610%" y="117" width="0.1957%" height="15" fill="rgb(248,47,43)"/><text x="24.1110%" y="127.50"></text></g><g><title>bananagrams`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (520 samples, 2.04%)</title><rect x="22.0370%" y="133" width="2.0354%" height="15" fill="rgb(221,10,30)"/><text x="22.2870%" y="143.50">b..</text></g><g><title>bananagrams`mi_malloc (141 samples, 0.55%)</title><rect x="24.5068%" y="117" width="0.5519%" height="15" fill="rgb(210,229,1)"/><text x="24.7568%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (26 samples, 0.10%)</title><rect x="25.0587%" y="117" width="0.1018%" height="15" fill="rgb(222,148,37)"/><text x="25.3087%" y="127.50"></text></g><g><title>bananagrams`alloc::slice::_&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (302 samples, 1.18%)</title><rect x="24.0723%" y="133" width="1.1821%" height="15" fill="rgb(234,67,33)"/><text x="24.3223%" y="143.50"></text></g><g><title>bananagrams`&lt;alloc::vec::Splice&lt;I&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.20%)</title><rect x="25.3914%" y="117" width="0.2035%" height="15" fill="rgb(247,98,35)"/><text x="25.6414%" y="127.50"></text></g><g><title>bananagrams`alloc::string::String::replace_range (93 samples, 0.36%)</title><rect x="25.2544%" y="133" width="0.3640%" height="15" fill="rgb(247,138,52)"/><text x="25.5044%" y="143.50"></text></g><g><title>bananagrams`mi_malloc (108 samples, 0.42%)</title><rect x="27.1606%" y="101" width="0.4227%" height="15" fill="rgb(213,79,30)"/><text x="27.4106%" y="111.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (28 samples, 0.11%)</title><rect x="27.5834%" y="101" width="0.1096%" height="15" fill="rgb(246,177,23)"/><text x="27.8334%" y="111.50"></text></g><g><title>bananagrams`alloc::slice::_&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (252 samples, 0.99%)</title><rect x="26.7692%" y="117" width="0.9864%" height="15" fill="rgb(230,62,27)"/><text x="27.0192%" y="127.50"></text></g><g><title>bananagrams`mi_free (56 samples, 0.22%)</title><rect x="27.7595%" y="117" width="0.2192%" height="15" fill="rgb(216,154,8)"/><text x="28.0095%" y="127.50"></text></g><g><title>bananagrams`bananagrams::can_be_made_with (664 samples, 2.60%)</title><rect x="25.6184%" y="133" width="2.5990%" height="15" fill="rgb(244,35,45)"/><text x="25.8684%" y="143.50">ba..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (51 samples, 0.20%)</title><rect x="28.0178%" y="117" width="0.1996%" height="15" fill="rgb(251,115,12)"/><text x="28.2678%" y="127.50"></text></g><g><title>bananagrams`core::iter::adapters::map_fold::_{{closure}} (90 samples, 0.35%)</title><rect x="28.2175%" y="133" width="0.3523%" height="15" fill="rgb(240,54,50)"/><text x="28.4675%" y="143.50"></text></g><g><title>bananagrams`core::str::_&lt;impl str&gt;::trim (41 samples, 0.16%)</title><rect x="28.5698%" y="133" width="0.1605%" height="15" fill="rgb(233,84,52)"/><text x="28.8198%" y="143.50"></text></g><g><title>bananagrams`mi_free (182 samples, 0.71%)</title><rect x="28.7302%" y="133" width="0.7124%" height="15" fill="rgb(207,117,47)"/><text x="28.9802%" y="143.50"></text></g><g><title>bananagrams`mi_malloc (35 samples, 0.14%)</title><rect x="29.4426%" y="133" width="0.1370%" height="15" fill="rgb(249,43,39)"/><text x="29.6926%" y="143.50"></text></g><g><title>bananagrams`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice (269 samples, 1.05%)</title><rect x="29.6579%" y="133" width="1.0529%" height="15" fill="rgb(209,38,44)"/><text x="29.9079%" y="143.50"></text></g><g><title>bananagrams`ndarray::dimension::do_slice (110 samples, 0.43%)</title><rect x="30.2803%" y="117" width="0.4306%" height="15" fill="rgb(236,212,23)"/><text x="30.5303%" y="127.50"></text></g><g><title>bananagrams`ndarray::iterators::Iter&lt;A,D&gt;::new (128 samples, 0.50%)</title><rect x="30.7108%" y="133" width="0.5010%" height="15" fill="rgb(242,79,21)"/><text x="30.9608%" y="143.50"></text></g><g><title>bananagrams`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::is_standard_layout::is_standard_layout (52 samples, 0.20%)</title><rect x="31.0083%" y="117" width="0.2035%" height="15" fill="rgb(211,96,35)"/><text x="31.2583%" y="127.50"></text></g><g><title>bananagrams`bananagrams::Grid::fits_in_row (5,383 samples, 21.07%)</title><rect x="10.3570%" y="149" width="21.0701%" height="15" fill="rgb(253,215,40)"/><text x="10.6070%" y="159.50">bananagrams`bananagrams::Grid::fi..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (55 samples, 0.22%)</title><rect x="31.2118%" y="133" width="0.2153%" height="15" fill="rgb(211,81,21)"/><text x="31.4618%" y="143.50"></text></g><g><title>bananagrams`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (5,536 samples, 21.67%)</title><rect x="9.8834%" y="165" width="21.6690%" height="15" fill="rgb(208,190,38)"/><text x="10.1334%" y="175.50">bananagrams`&lt;alloc::vec::Vec&lt;T&gt; as..</text></g><g><title>bananagrams`mi_malloc (138 samples, 0.54%)</title><rect x="32.0338%" y="133" width="0.5402%" height="15" fill="rgb(235,213,38)"/><text x="32.2838%" y="143.50"></text></g><g><title>bananagrams`&lt;alloc::string::String as core::clone::Clone&gt;::clone (336 samples, 1.32%)</title><rect x="31.6541%" y="149" width="1.3152%" height="15" fill="rgb(237,122,38)"/><text x="31.9041%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (90 samples, 0.35%)</title><rect x="32.6170%" y="133" width="0.3523%" height="15" fill="rgb(244,218,35)"/><text x="32.8670%" y="143.50"></text></g><g><title>bananagrams`&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (404 samples, 1.58%)</title><rect x="31.5524%" y="165" width="1.5813%" height="15" fill="rgb(240,68,47)"/><text x="31.8024%" y="175.50"></text></g><g><title>bananagrams`bananagrams::Grid::valid_bananagrams (51 samples, 0.20%)</title><rect x="33.2981%" y="165" width="0.1996%" height="15" fill="rgb(210,16,53)"/><text x="33.5481%" y="175.50"></text></g><g><title>bananagrams`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (39 samples, 0.15%)</title><rect x="33.7052%" y="149" width="0.1527%" height="15" fill="rgb(235,124,12)"/><text x="33.9552%" y="159.50"></text></g><g><title>bananagrams`bananagrams::Grid::word_placements_for (95 samples, 0.37%)</title><rect x="33.4977%" y="165" width="0.3718%" height="15" fill="rgb(224,169,11)"/><text x="33.7477%" y="175.50"></text></g><g><title>bananagrams`__rg_dealloc (53 samples, 0.21%)</title><rect x="34.6837%" y="133" width="0.2075%" height="15" fill="rgb(250,166,2)"/><text x="34.9337%" y="143.50"></text></g><g><title>bananagrams`__rust_dealloc (26 samples, 0.10%)</title><rect x="34.8951%" y="133" width="0.1018%" height="15" fill="rgb(242,216,29)"/><text x="35.1451%" y="143.50"></text></g><g><title>bananagrams`mi_malloc (50 samples, 0.20%)</title><rect x="38.7976%" y="101" width="0.1957%" height="15" fill="rgb(230,116,27)"/><text x="39.0476%" y="111.50"></text></g><g><title>bananagrams`&lt;alloc::string::String as core::clone::Clone&gt;::clone (87 samples, 0.34%)</title><rect x="38.7036%" y="117" width="0.3405%" height="15" fill="rgb(228,99,48)"/><text x="38.9536%" y="127.50"></text></g><g><title>bananagrams`mi_usable_size (41 samples, 0.16%)</title><rect x="41.5766%" y="69" width="0.1605%" height="15" fill="rgb(253,11,6)"/><text x="41.8266%" y="79.50"></text></g><g><title>bananagrams`_mi_heap_realloc_zero (144 samples, 0.56%)</title><rect x="41.2048%" y="85" width="0.5636%" height="15" fill="rgb(247,143,39)"/><text x="41.4548%" y="95.50"></text></g><g><title>bananagrams`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (238 samples, 0.93%)</title><rect x="40.9425%" y="101" width="0.9316%" height="15" fill="rgb(236,97,10)"/><text x="41.1925%" y="111.50"></text></g><g><title>bananagrams`mi_malloc (181 samples, 0.71%)</title><rect x="41.8741%" y="101" width="0.7085%" height="15" fill="rgb(233,208,19)"/><text x="42.1241%" y="111.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (31 samples, 0.12%)</title><rect x="42.6100%" y="101" width="0.1213%" height="15" fill="rgb(216,164,2)"/><text x="42.8600%" y="111.50"></text></g><g><title>bananagrams`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (939 samples, 3.68%)</title><rect x="39.0637%" y="117" width="3.6754%" height="15" fill="rgb(220,129,5)"/><text x="39.3137%" y="127.50">bana..</text></g><g><title>bananagrams`&lt;ndarray::iterators::Iter&lt;A,D&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,970 samples, 7.71%)</title><rect x="42.7392%" y="117" width="7.7110%" height="15" fill="rgb(242,17,10)"/><text x="42.9892%" y="127.50">bananagrams..</text></g><g><title>bananagrams`core::iter::adapters::map_fold::_{{closure}} (967 samples, 3.79%)</title><rect x="46.6651%" y="101" width="3.7850%" height="15" fill="rgb(242,107,0)"/><text x="46.9151%" y="111.50">bana..</text></g><g><title>bananagrams`&lt;ndarray::iterators::Iter&lt;A,D&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (30 samples, 0.12%)</title><rect x="50.4501%" y="117" width="0.1174%" height="15" fill="rgb(251,28,31)"/><text x="50.7001%" y="127.50"></text></g><g><title>bananagrams`__rg_alloc (26 samples, 0.10%)</title><rect x="50.6145%" y="117" width="0.1018%" height="15" fill="rgb(233,223,10)"/><text x="50.8645%" y="127.50"></text></g><g><title>bananagrams`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (44 samples, 0.17%)</title><rect x="51.2095%" y="69" width="0.1722%" height="15" fill="rgb(215,21,27)"/><text x="51.4595%" y="79.50"></text></g><g><title>bananagrams`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (53 samples, 0.21%)</title><rect x="51.1938%" y="85" width="0.2075%" height="15" fill="rgb(232,23,21)"/><text x="51.4438%" y="95.50"></text></g><g><title>bananagrams`_mi_heap_realloc_zero (36 samples, 0.14%)</title><rect x="51.6674%" y="37" width="0.1409%" height="15" fill="rgb(244,5,23)"/><text x="51.9174%" y="47.50"></text></g><g><title>bananagrams`alloc::string::String::push (84 samples, 0.33%)</title><rect x="51.5422%" y="53" width="0.3288%" height="15" fill="rgb(226,81,46)"/><text x="51.7922%" y="63.50"></text></g><g><title>bananagrams`&lt;&amp;mut W as core::fmt::Write&gt;::write_char (92 samples, 0.36%)</title><rect x="51.5187%" y="69" width="0.3601%" height="15" fill="rgb(247,70,30)"/><text x="51.7687%" y="79.50"></text></g><g><title>bananagrams`alloc::fmt::format (267 samples, 1.05%)</title><rect x="50.9277%" y="117" width="1.0451%" height="15" fill="rgb(212,68,19)"/><text x="51.1777%" y="127.50"></text></g><g><title>bananagrams`core::fmt::write (242 samples, 0.95%)</title><rect x="51.0255%" y="101" width="0.9472%" height="15" fill="rgb(240,187,13)"/><text x="51.2755%" y="111.50"></text></g><g><title>bananagrams`core::fmt::Formatter::pad (143 samples, 0.56%)</title><rect x="51.4130%" y="85" width="0.5597%" height="15" fill="rgb(223,113,26)"/><text x="51.6630%" y="95.50"></text></g><g><title>bananagrams`mi_usable_size (42 samples, 0.16%)</title><rect x="53.3975%" y="85" width="0.1644%" height="15" fill="rgb(206,192,2)"/><text x="53.6475%" y="95.50"></text></g><g><title>bananagrams`_mi_heap_realloc_zero (266 samples, 1.04%)</title><rect x="52.5873%" y="101" width="1.0412%" height="15" fill="rgb(241,108,4)"/><text x="52.8373%" y="111.50"></text></g><g><title>bananagrams`mi_malloc (176 samples, 0.69%)</title><rect x="53.6441%" y="101" width="0.6889%" height="15" fill="rgb(247,173,49)"/><text x="53.8941%" y="111.50"></text></g><g><title>bananagrams`mi_realloc (34 samples, 0.13%)</title><rect x="54.3330%" y="101" width="0.1331%" height="15" fill="rgb(224,114,35)"/><text x="54.5830%" y="111.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (77 samples, 0.30%)</title><rect x="54.4778%" y="101" width="0.3014%" height="15" fill="rgb(245,159,27)"/><text x="54.7278%" y="111.50"></text></g><g><title>bananagrams`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (727 samples, 2.85%)</title><rect x="51.9728%" y="117" width="2.8456%" height="15" fill="rgb(245,172,44)"/><text x="52.2228%" y="127.50">ba..</text></g><g><title>bananagrams`mi_malloc (228 samples, 0.89%)</title><rect x="55.4368%" y="101" width="0.8924%" height="15" fill="rgb(236,23,11)"/><text x="55.6868%" y="111.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (37 samples, 0.14%)</title><rect x="56.3293%" y="101" width="0.1448%" height="15" fill="rgb(205,117,38)"/><text x="56.5793%" y="111.50"></text></g><g><title>bananagrams`alloc::slice::_&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (457 samples, 1.79%)</title><rect x="54.8184%" y="117" width="1.7888%" height="15" fill="rgb(237,72,25)"/><text x="55.0684%" y="127.50">b..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (34 samples, 0.13%)</title><rect x="56.4741%" y="101" width="0.1331%" height="15" fill="rgb(244,70,9)"/><text x="56.7241%" y="111.50"></text></g><g><title>bananagrams`&lt;alloc::vec::Splice&lt;I&gt; as core::ops::drop::Drop&gt;::drop (77 samples, 0.30%)</title><rect x="56.7755%" y="101" width="0.3014%" height="15" fill="rgb(217,125,39)"/><text x="57.0255%" y="111.50"></text></g><g><title>bananagrams`alloc::string::String::replace_range (136 samples, 0.53%)</title><rect x="56.6072%" y="117" width="0.5323%" height="15" fill="rgb(235,36,10)"/><text x="56.8572%" y="127.50"></text></g><g><title>bananagrams`mi_malloc (189 samples, 0.74%)</title><rect x="59.1162%" y="85" width="0.7398%" height="15" fill="rgb(251,123,47)"/><text x="59.3662%" y="95.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (31 samples, 0.12%)</title><rect x="59.8560%" y="85" width="0.1213%" height="15" fill="rgb(221,13,13)"/><text x="60.1060%" y="95.50"></text></g><g><title>bananagrams`alloc::slice::_&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (393 samples, 1.54%)</title><rect x="58.5604%" y="101" width="1.5383%" height="15" fill="rgb(238,131,9)"/><text x="58.8104%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (31 samples, 0.12%)</title><rect x="59.9773%" y="85" width="0.1213%" height="15" fill="rgb(211,50,8)"/><text x="60.2273%" y="95.50"></text></g><g><title>bananagrams`mi_free (74 samples, 0.29%)</title><rect x="60.0986%" y="101" width="0.2897%" height="15" fill="rgb(245,182,24)"/><text x="60.3486%" y="111.50"></text></g><g><title>bananagrams`bananagrams::can_be_made_with (924 samples, 3.62%)</title><rect x="57.1395%" y="117" width="3.6167%" height="15" fill="rgb(242,14,37)"/><text x="57.3895%" y="127.50">bana..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (77 samples, 0.30%)</title><rect x="60.4548%" y="101" width="0.3014%" height="15" fill="rgb(246,228,12)"/><text x="60.7048%" y="111.50"></text></g><g><title>bananagrams`core::iter::adapters::map_fold::_{{closure}} (109 samples, 0.43%)</title><rect x="60.7562%" y="117" width="0.4266%" height="15" fill="rgb(213,55,15)"/><text x="61.0062%" y="127.50"></text></g><g><title>bananagrams`core::str::_&lt;impl str&gt;::trim (47 samples, 0.18%)</title><rect x="61.1868%" y="117" width="0.1840%" height="15" fill="rgb(209,9,3)"/><text x="61.4368%" y="127.50"></text></g><g><title>bananagrams`mi_free (219 samples, 0.86%)</title><rect x="61.3708%" y="117" width="0.8572%" height="15" fill="rgb(230,59,30)"/><text x="61.6208%" y="127.50"></text></g><g><title>bananagrams`mi_malloc (54 samples, 0.21%)</title><rect x="62.2280%" y="117" width="0.2114%" height="15" fill="rgb(209,121,21)"/><text x="62.4780%" y="127.50"></text></g><g><title>bananagrams`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice (389 samples, 1.52%)</title><rect x="62.5568%" y="117" width="1.5226%" height="15" fill="rgb(220,109,13)"/><text x="62.8068%" y="127.50"></text></g><g><title>bananagrams`ndarray::dimension::do_slice (163 samples, 0.64%)</title><rect x="63.4414%" y="101" width="0.6380%" height="15" fill="rgb(232,18,1)"/><text x="63.6914%" y="111.50"></text></g><g><title>bananagrams`ndarray::iterators::Iter&lt;A,D&gt;::new (181 samples, 0.71%)</title><rect x="64.0794%" y="117" width="0.7085%" height="15" fill="rgb(215,41,42)"/><text x="64.3294%" y="127.50"></text></g><g><title>bananagrams`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::is_standard_layout::is_standard_layout (64 samples, 0.25%)</title><rect x="64.5373%" y="101" width="0.2505%" height="15" fill="rgb(224,123,36)"/><text x="64.7873%" y="111.50"></text></g><g><title>bananagrams`bananagrams::Grid::fits_in_row (7,641 samples, 29.91%)</title><rect x="35.1300%" y="133" width="29.9084%" height="15" fill="rgb(240,125,3)"/><text x="35.3800%" y="143.50">bananagrams`bananagrams::Grid::fits_in_row</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (61 samples, 0.24%)</title><rect x="64.7996%" y="117" width="0.2388%" height="15" fill="rgb(205,98,50)"/><text x="65.0496%" y="127.50"></text></g><g><title>bananagrams`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (7,874 samples, 30.82%)</title><rect x="34.3471%" y="149" width="30.8204%" height="15" fill="rgb(205,185,37)"/><text x="34.5971%" y="159.50">bananagrams`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::Spe..</text></g><g><title>bananagrams`mi_malloc (123 samples, 0.48%)</title><rect x="65.6020%" y="117" width="0.4814%" height="15" fill="rgb(238,207,15)"/><text x="65.8520%" y="127.50"></text></g><g><title>bananagrams`&lt;alloc::string::String as core::clone::Clone&gt;::clone (279 samples, 1.09%)</title><rect x="65.3084%" y="133" width="1.0921%" height="15" fill="rgb(213,199,42)"/><text x="65.5584%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (75 samples, 0.29%)</title><rect x="66.1069%" y="117" width="0.2936%" height="15" fill="rgb(235,201,11)"/><text x="66.3569%" y="127.50"></text></g><g><title>bananagrams`&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (368 samples, 1.44%)</title><rect x="65.1714%" y="149" width="1.4404%" height="15" fill="rgb(207,46,11)"/><text x="65.4214%" y="159.50"></text></g><g><title>bananagrams`bananagrams::Grid::valid_bananagrams (75 samples, 0.29%)</title><rect x="66.9133%" y="149" width="0.2936%" height="15" fill="rgb(241,35,35)"/><text x="67.1633%" y="159.50"></text></g><g><title>bananagrams`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (44 samples, 0.17%)</title><rect x="67.5278%" y="133" width="0.1722%" height="15" fill="rgb(243,32,47)"/><text x="67.7778%" y="143.50"></text></g><g><title>bananagrams`bananagrams::Grid::word_placements_for (130 samples, 0.51%)</title><rect x="67.2068%" y="149" width="0.5088%" height="15" fill="rgb(247,202,23)"/><text x="67.4568%" y="159.50"></text></g><g><title>bananagrams`__rg_dealloc (27 samples, 0.11%)</title><rect x="68.3615%" y="117" width="0.1057%" height="15" fill="rgb(219,102,11)"/><text x="68.6115%" y="127.50"></text></g><g><title>bananagrams`mi_malloc (30 samples, 0.12%)</title><rect x="70.8627%" y="85" width="0.1174%" height="15" fill="rgb(243,110,44)"/><text x="71.1127%" y="95.50"></text></g><g><title>bananagrams`&lt;alloc::string::String as core::clone::Clone&gt;::clone (54 samples, 0.21%)</title><rect x="70.8196%" y="101" width="0.2114%" height="15" fill="rgb(222,74,54)"/><text x="71.0696%" y="111.50"></text></g><g><title>bananagrams`mi_usable_size (34 samples, 0.13%)</title><rect x="72.7141%" y="53" width="0.1331%" height="15" fill="rgb(216,99,12)"/><text x="72.9641%" y="63.50"></text></g><g><title>bananagrams`_mi_heap_realloc_zero (111 samples, 0.43%)</title><rect x="72.4245%" y="69" width="0.4345%" height="15" fill="rgb(226,22,26)"/><text x="72.6745%" y="79.50"></text></g><g><title>bananagrams`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (190 samples, 0.74%)</title><rect x="72.2209%" y="85" width="0.7437%" height="15" fill="rgb(217,163,10)"/><text x="72.4709%" y="95.50"></text></g><g><title>bananagrams`mi_malloc (109 samples, 0.43%)</title><rect x="72.9646%" y="85" width="0.4266%" height="15" fill="rgb(213,25,53)"/><text x="73.2146%" y="95.50"></text></g><g><title>bananagrams`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (616 samples, 2.41%)</title><rect x="71.0388%" y="101" width="2.4111%" height="15" fill="rgb(252,105,26)"/><text x="71.2888%" y="111.50">ba..</text></g><g><title>bananagrams`&lt;ndarray::iterators::Iter&lt;A,D&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,352 samples, 5.29%)</title><rect x="73.4539%" y="101" width="5.2920%" height="15" fill="rgb(220,39,43)"/><text x="73.7039%" y="111.50">banana..</text></g><g><title>bananagrams`core::iter::adapters::map_fold::_{{closure}} (657 samples, 2.57%)</title><rect x="76.1743%" y="85" width="2.5716%" height="15" fill="rgb(229,68,48)"/><text x="76.4243%" y="95.50">ba..</text></g><g><title>bananagrams`&lt;ndarray::iterators::Iter&lt;A,D&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (30 samples, 0.12%)</title><rect x="78.7459%" y="101" width="0.1174%" height="15" fill="rgb(252,8,32)"/><text x="78.9959%" y="111.50"></text></g><g><title>bananagrams`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (30 samples, 0.12%)</title><rect x="79.3056%" y="53" width="0.1174%" height="15" fill="rgb(223,20,43)"/><text x="79.5556%" y="63.50"></text></g><g><title>bananagrams`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (36 samples, 0.14%)</title><rect x="79.2900%" y="69" width="0.1409%" height="15" fill="rgb(229,81,49)"/><text x="79.5400%" y="79.50"></text></g><g><title>bananagrams`alloc::string::String::push (51 samples, 0.20%)</title><rect x="79.5131%" y="37" width="0.1996%" height="15" fill="rgb(236,28,36)"/><text x="79.7631%" y="47.50"></text></g><g><title>bananagrams`&lt;&amp;mut W as core::fmt::Write&gt;::write_char (59 samples, 0.23%)</title><rect x="79.4857%" y="53" width="0.2309%" height="15" fill="rgb(249,185,26)"/><text x="79.7357%" y="63.50"></text></g><g><title>bananagrams`alloc::fmt::format (152 samples, 0.59%)</title><rect x="79.1530%" y="101" width="0.5950%" height="15" fill="rgb(249,174,33)"/><text x="79.4030%" y="111.50"></text></g><g><title>bananagrams`core::fmt::write (143 samples, 0.56%)</title><rect x="79.1882%" y="85" width="0.5597%" height="15" fill="rgb(233,201,37)"/><text x="79.4382%" y="95.50"></text></g><g><title>bananagrams`core::fmt::Formatter::pad (81 samples, 0.32%)</title><rect x="79.4309%" y="69" width="0.3171%" height="15" fill="rgb(221,78,26)"/><text x="79.6809%" y="79.50"></text></g><g><title>bananagrams`mi_usable_size (41 samples, 0.16%)</title><rect x="80.8008%" y="69" width="0.1605%" height="15" fill="rgb(250,127,30)"/><text x="81.0508%" y="79.50"></text></g><g><title>bananagrams`_mi_heap_realloc_zero (218 samples, 0.85%)</title><rect x="80.2176%" y="85" width="0.8533%" height="15" fill="rgb(230,49,44)"/><text x="80.4676%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (28 samples, 0.11%)</title><rect x="80.9613%" y="69" width="0.1096%" height="15" fill="rgb(229,67,23)"/><text x="81.2113%" y="79.50"></text></g><g><title>bananagrams`mi_malloc (149 samples, 0.58%)</title><rect x="81.0788%" y="85" width="0.5832%" height="15" fill="rgb(249,83,47)"/><text x="81.3288%" y="95.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (50 samples, 0.20%)</title><rect x="81.7207%" y="85" width="0.1957%" height="15" fill="rgb(215,43,3)"/><text x="81.9707%" y="95.50"></text></g><g><title>bananagrams`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (560 samples, 2.19%)</title><rect x="79.7479%" y="101" width="2.1920%" height="15" fill="rgb(238,154,13)"/><text x="79.9979%" y="111.50">b..</text></g><g><title>bananagrams`mi_malloc (154 samples, 0.60%)</title><rect x="82.3861%" y="85" width="0.6028%" height="15" fill="rgb(219,56,2)"/><text x="82.6361%" y="95.50"></text></g><g><title>bananagrams`alloc::slice::_&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (316 samples, 1.24%)</title><rect x="81.9399%" y="101" width="1.2369%" height="15" fill="rgb(233,0,4)"/><text x="82.1899%" y="111.50"></text></g><g><title>bananagrams`&lt;alloc::vec::Splice&lt;I&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 0.21%)</title><rect x="83.2472%" y="85" width="0.2114%" height="15" fill="rgb(235,30,7)"/><text x="83.4972%" y="95.50"></text></g><g><title>bananagrams`alloc::string::String::replace_range (74 samples, 0.29%)</title><rect x="83.1768%" y="101" width="0.2897%" height="15" fill="rgb(250,79,13)"/><text x="83.4268%" y="111.50"></text></g><g><title>bananagrams`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (26 samples, 0.10%)</title><rect x="84.8129%" y="69" width="0.1018%" height="15" fill="rgb(211,146,34)"/><text x="85.0629%" y="79.50"></text></g><g><title>bananagrams`mi_malloc (136 samples, 0.53%)</title><rect x="84.9695%" y="69" width="0.5323%" height="15" fill="rgb(228,22,38)"/><text x="85.2195%" y="79.50"></text></g><g><title>bananagrams`alloc::slice::_&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (292 samples, 1.14%)</title><rect x="84.4959%" y="85" width="1.1429%" height="15" fill="rgb(235,168,5)"/><text x="84.7459%" y="95.50"></text></g><g><title>bananagrams`mi_free (49 samples, 0.19%)</title><rect x="85.6388%" y="85" width="0.1918%" height="15" fill="rgb(221,155,16)"/><text x="85.8888%" y="95.50"></text></g><g><title>bananagrams`bananagrams::can_be_made_with (661 samples, 2.59%)</title><rect x="83.4664%" y="101" width="2.5873%" height="15" fill="rgb(215,215,53)"/><text x="83.7164%" y="111.50">ba..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (49 samples, 0.19%)</title><rect x="85.8619%" y="85" width="0.1918%" height="15" fill="rgb(223,4,10)"/><text x="86.1119%" y="95.50"></text></g><g><title>bananagrams`core::iter::adapters::map_fold::_{{closure}} (85 samples, 0.33%)</title><rect x="86.0537%" y="101" width="0.3327%" height="15" fill="rgb(234,103,6)"/><text x="86.3037%" y="111.50"></text></g><g><title>bananagrams`mi_free (135 samples, 0.53%)</title><rect x="86.4804%" y="101" width="0.5284%" height="15" fill="rgb(227,97,0)"/><text x="86.7304%" y="111.50"></text></g><g><title>bananagrams`mi_malloc (37 samples, 0.14%)</title><rect x="87.0088%" y="101" width="0.1448%" height="15" fill="rgb(234,150,53)"/><text x="87.2588%" y="111.50"></text></g><g><title>bananagrams`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice (295 samples, 1.15%)</title><rect x="87.2397%" y="101" width="1.1547%" height="15" fill="rgb(228,201,54)"/><text x="87.4897%" y="111.50"></text></g><g><title>bananagrams`ndarray::dimension::do_slice (130 samples, 0.51%)</title><rect x="87.8855%" y="85" width="0.5088%" height="15" fill="rgb(222,22,37)"/><text x="88.1355%" y="95.50"></text></g><g><title>bananagrams`ndarray::iterators::Iter&lt;A,D&gt;::new (142 samples, 0.56%)</title><rect x="88.3944%" y="101" width="0.5558%" height="15" fill="rgb(237,53,32)"/><text x="88.6444%" y="111.50"></text></g><g><title>bananagrams`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::is_standard_layout::is_standard_layout (52 samples, 0.20%)</title><rect x="88.7467%" y="85" width="0.2035%" height="15" fill="rgb(233,25,53)"/><text x="88.9967%" y="95.50"></text></g><g><title>bananagrams`bananagrams::Grid::fits_in_row (5,262 samples, 20.60%)</title><rect x="68.5690%" y="117" width="20.5965%" height="15" fill="rgb(210,40,34)"/><text x="68.8190%" y="127.50">bananagrams`bananagrams::Grid::f..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (53 samples, 0.21%)</title><rect x="88.9580%" y="101" width="0.2075%" height="15" fill="rgb(241,220,44)"/><text x="89.2080%" y="111.50"></text></g><g><title>bananagrams`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (5,405 samples, 21.16%)</title><rect x="68.1541%" y="133" width="21.1563%" height="15" fill="rgb(235,28,35)"/><text x="68.4041%" y="143.50">bananagrams`&lt;alloc::vec::Vec&lt;T&gt; a..</text></g><g><title>bananagrams`mi_malloc (65 samples, 0.25%)</title><rect x="89.4238%" y="101" width="0.2544%" height="15" fill="rgb(210,56,17)"/><text x="89.6738%" y="111.50"></text></g><g><title>bananagrams`&lt;alloc::string::String as core::clone::Clone&gt;::clone (105 samples, 0.41%)</title><rect x="89.3495%" y="117" width="0.4110%" height="15" fill="rgb(224,130,29)"/><text x="89.5995%" y="127.50"></text></g><g><title>bananagrams`&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (134 samples, 0.52%)</title><rect x="89.3103%" y="133" width="0.5245%" height="15" fill="rgb(235,212,8)"/><text x="89.5603%" y="143.50"></text></g><g><title>bananagrams`bananagrams::Grid::valid_bananagrams (60 samples, 0.23%)</title><rect x="89.9718%" y="133" width="0.2349%" height="15" fill="rgb(223,33,50)"/><text x="90.2218%" y="143.50"></text></g><g><title>bananagrams`bananagrams::Grid::word_placements_for (60 samples, 0.23%)</title><rect x="90.2067%" y="133" width="0.2349%" height="15" fill="rgb(219,149,13)"/><text x="90.4567%" y="143.50"></text></g><g><title>bananagrams`_mi_heap_realloc_zero (36 samples, 0.14%)</title><rect x="92.1520%" y="53" width="0.1409%" height="15" fill="rgb(250,156,29)"/><text x="92.4020%" y="63.50"></text></g><g><title>bananagrams`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (69 samples, 0.27%)</title><rect x="92.0698%" y="69" width="0.2701%" height="15" fill="rgb(216,193,19)"/><text x="92.3198%" y="79.50"></text></g><g><title>bananagrams`mi_malloc (48 samples, 0.19%)</title><rect x="92.3399%" y="69" width="0.1879%" height="15" fill="rgb(216,135,14)"/><text x="92.5899%" y="79.50"></text></g><g><title>bananagrams`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (227 samples, 0.89%)</title><rect x="91.6510%" y="85" width="0.8885%" height="15" fill="rgb(241,47,5)"/><text x="91.9010%" y="95.50"></text></g><g><title>bananagrams`&lt;ndarray::iterators::Iter&lt;A,D&gt; as core::iter::traits::iterator::Iterator&gt;::fold (460 samples, 1.80%)</title><rect x="92.5434%" y="85" width="1.8005%" height="15" fill="rgb(233,42,35)"/><text x="92.7934%" y="95.50">b..</text></g><g><title>bananagrams`core::iter::adapters::map_fold::_{{closure}} (242 samples, 0.95%)</title><rect x="93.3967%" y="69" width="0.9472%" height="15" fill="rgb(231,13,6)"/><text x="93.6467%" y="79.50"></text></g><g><title>bananagrams`alloc::fmt::format (31 samples, 0.12%)</title><rect x="94.4536%" y="85" width="0.1213%" height="15" fill="rgb(207,181,40)"/><text x="94.7036%" y="95.50"></text></g><g><title>bananagrams`core::fmt::write (29 samples, 0.11%)</title><rect x="94.4614%" y="69" width="0.1135%" height="15" fill="rgb(254,173,49)"/><text x="94.7114%" y="79.50"></text></g><g><title>bananagrams`_mi_heap_realloc_zero (65 samples, 0.25%)</title><rect x="94.7628%" y="69" width="0.2544%" height="15" fill="rgb(221,1,38)"/><text x="95.0128%" y="79.50"></text></g><g><title>bananagrams`mi_malloc (41 samples, 0.16%)</title><rect x="95.0211%" y="69" width="0.1605%" height="15" fill="rgb(206,124,46)"/><text x="95.2711%" y="79.50"></text></g><g><title>bananagrams`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (186 samples, 0.73%)</title><rect x="94.5749%" y="85" width="0.7280%" height="15" fill="rgb(249,21,11)"/><text x="94.8249%" y="95.50"></text></g><g><title>bananagrams`mi_malloc (56 samples, 0.22%)</title><rect x="95.4517%" y="69" width="0.2192%" height="15" fill="rgb(222,201,40)"/><text x="95.7017%" y="79.50"></text></g><g><title>bananagrams`alloc::slice::_&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (114 samples, 0.45%)</title><rect x="95.3030%" y="85" width="0.4462%" height="15" fill="rgb(235,61,29)"/><text x="95.5530%" y="95.50"></text></g><g><title>bananagrams`mi_malloc (72 samples, 0.28%)</title><rect x="96.2502%" y="53" width="0.2818%" height="15" fill="rgb(219,207,3)"/><text x="96.5002%" y="63.50"></text></g><g><title>bananagrams`alloc::slice::_&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (122 samples, 0.48%)</title><rect x="96.1054%" y="69" width="0.4775%" height="15" fill="rgb(222,56,46)"/><text x="96.3554%" y="79.50"></text></g><g><title>bananagrams`bananagrams::can_be_made_with (240 samples, 0.94%)</title><rect x="95.8001%" y="85" width="0.9394%" height="15" fill="rgb(239,76,54)"/><text x="96.0501%" y="95.50"></text></g><g><title>bananagrams`core::iter::adapters::map_fold::_{{closure}} (30 samples, 0.12%)</title><rect x="96.7395%" y="85" width="0.1174%" height="15" fill="rgb(231,124,27)"/><text x="96.9895%" y="95.50"></text></g><g><title>bananagrams`mi_free (51 samples, 0.20%)</title><rect x="96.8843%" y="85" width="0.1996%" height="15" fill="rgb(249,195,6)"/><text x="97.1343%" y="95.50"></text></g><g><title>bananagrams`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice (96 samples, 0.38%)</title><rect x="97.1622%" y="85" width="0.3758%" height="15" fill="rgb(237,174,47)"/><text x="97.4122%" y="95.50"></text></g><g><title>bananagrams`ndarray::dimension::do_slice (43 samples, 0.17%)</title><rect x="97.3697%" y="69" width="0.1683%" height="15" fill="rgb(206,201,31)"/><text x="97.6197%" y="79.50"></text></g><g><title>bananagrams`ndarray::iterators::Iter&lt;A,D&gt;::new (47 samples, 0.18%)</title><rect x="97.5380%" y="85" width="0.1840%" height="15" fill="rgb(231,57,52)"/><text x="97.7880%" y="95.50"></text></g><g><title>bananagrams`bananagrams::Grid::fits_in_row (1,796 samples, 7.03%)</title><rect x="90.7507%" y="101" width="7.0299%" height="15" fill="rgb(248,177,22)"/><text x="91.0007%" y="111.50">bananagra..</text></g><g><title>bananagrams`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1,843 samples, 7.21%)</title><rect x="90.6059%" y="117" width="7.2139%" height="15" fill="rgb(215,211,37)"/><text x="90.8559%" y="127.50">bananagram..</text></g><g><title>bananagrams`&lt;ndarray::iterators::Iter&lt;A,D&gt; as core::iter::traits::iterator::Iterator&gt;::fold (53 samples, 0.21%)</title><rect x="98.2347%" y="69" width="0.2075%" height="15" fill="rgb(241,128,51)"/><text x="98.4847%" y="79.50"></text></g><g><title>bananagrams`core::iter::adapters::map_fold::_{{closure}} (29 samples, 0.11%)</title><rect x="98.3286%" y="53" width="0.1135%" height="15" fill="rgb(227,165,31)"/><text x="98.5786%" y="63.50"></text></g><g><title>bananagrams`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (181 samples, 0.71%)</title><rect x="98.0468%" y="101" width="0.7085%" height="15" fill="rgb(228,167,24)"/><text x="98.2968%" y="111.50"></text></g><g><title>bananagrams`bananagrams::Grid::fits_in_row (177 samples, 0.69%)</title><rect x="98.0625%" y="85" width="0.6928%" height="15" fill="rgb(228,143,12)"/><text x="98.3125%" y="95.50"></text></g><g><title>bananagrams`bananagrams::find_minimum_area_configuration (202 samples, 0.79%)</title><rect x="98.0233%" y="117" width="0.7907%" height="15" fill="rgb(249,149,8)"/><text x="98.2733%" y="127.50"></text></g><g><title>bananagrams`bananagrams::find_minimum_area_configuration (2,164 samples, 8.47%)</title><rect x="90.4611%" y="133" width="8.4703%" height="15" fill="rgb(243,35,44)"/><text x="90.7111%" y="143.50">bananagrams`..</text></g><g><title>bananagrams`mi_free (28 samples, 0.11%)</title><rect x="98.8218%" y="117" width="0.1096%" height="15" fill="rgb(246,89,9)"/><text x="99.0718%" y="127.50"></text></g><g><title>bananagrams`mi_free (73 samples, 0.29%)</title><rect x="98.9549%" y="133" width="0.2857%" height="15" fill="rgb(233,213,13)"/><text x="99.2049%" y="143.50"></text></g><g><title>bananagrams`bananagrams::find_minimum_area_configuration (8,051 samples, 31.51%)</title><rect x="67.7392%" y="149" width="31.5132%" height="15" fill="rgb(233,141,41)"/><text x="67.9892%" y="159.50">bananagrams`bananagrams::find_minimum_area_configur..</text></g><g><title>bananagrams`mi_free (88 samples, 0.34%)</title><rect x="99.2759%" y="149" width="0.3444%" height="15" fill="rgb(239,167,4)"/><text x="99.5259%" y="159.50"></text></g><g><title>bananagrams`bananagrams::find_minimum_area_configuration (16,794 samples, 65.74%)</title><rect x="33.9126%" y="165" width="65.7351%" height="15" fill="rgb(209,217,16)"/><text x="34.1626%" y="175.50">bananagrams`bananagrams::find_minimum_area_configuration</text></g><g><title>bananagrams`mi_free (55 samples, 0.22%)</title><rect x="99.6516%" y="165" width="0.2153%" height="15" fill="rgb(219,88,35)"/><text x="99.9016%" y="175.50"></text></g><g><title>bananagrams`bananagrams::find_minimum_area_configuration (23,063 samples, 90.27%)</title><rect x="9.6054%" y="181" width="90.2732%" height="15" fill="rgb(220,193,23)"/><text x="9.8554%" y="191.50">bananagrams`bananagrams::find_minimum_area_configuration</text></g><g><title>bananagrams`bananagrams::find_minimum_area_configuration (25,157 samples, 98.47%)</title><rect x="1.5109%" y="197" width="98.4695%" height="15" fill="rgb(230,90,52)"/><text x="1.7609%" y="207.50">bananagrams`bananagrams::find_minimum_area_configuration</text></g><g><title>bananagrams`bananagrams::find_minimum_area_configuration (25,519 samples, 99.89%)</title><rect x="0.1018%" y="229" width="99.8865%" height="15" fill="rgb(252,106,19)"/><text x="0.3518%" y="239.50">bananagrams`bananagrams::find_minimum_area_configuration</text></g><g><title>bananagrams`bananagrams::find_minimum_area_configuration (25,490 samples, 99.77%)</title><rect x="0.2153%" y="213" width="99.7730%" height="15" fill="rgb(206,74,20)"/><text x="0.4653%" y="223.50">bananagrams`bananagrams::find_minimum_area_configuration</text></g><g><title>bananagrams`bananagrams::find_minimum_area_configuration (25,522 samples, 99.90%)</title><rect x="0.0939%" y="245" width="99.8982%" height="15" fill="rgb(230,138,44)"/><text x="0.3439%" y="255.50">bananagrams`bananagrams::find_minimum_area_configuration</text></g><g><title>bananagrams`main (25,547 samples, 100.00%)</title><rect x="0.0000%" y="309" width="99.9961%" height="15" fill="rgb(235,182,43)"/><text x="0.2500%" y="319.50">bananagrams`main</text></g><g><title>bananagrams`std::rt::lang_start_internal (25,547 samples, 100.00%)</title><rect x="0.0000%" y="293" width="99.9961%" height="15" fill="rgb(242,16,51)"/><text x="0.2500%" y="303.50">bananagrams`std::rt::lang_start_internal</text></g><g><title>bananagrams`std::rt::lang_start::_{{closure}} (25,547 samples, 100.00%)</title><rect x="0.0000%" y="277" width="99.9961%" height="15" fill="rgb(248,9,4)"/><text x="0.2500%" y="287.50">bananagrams`std::rt::lang_start::_{{closure}}</text></g><g><title>bananagrams`bananagrams::main (25,547 samples, 100.00%)</title><rect x="0.0000%" y="261" width="99.9961%" height="15" fill="rgb(210,31,22)"/><text x="0.2500%" y="271.50">bananagrams`bananagrams::main</text></g><g><title>all (25,548 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(239,54,39)"/><text x="0.2500%" y="367.50"></text></g><g><title>bananagrams`0x4 (25,548 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(230,99,41)"/><text x="0.2500%" y="351.50">bananagrams`0x4</text></g><g><title>libdyld.dylib`start (25,548 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(253,106,12)"/><text x="0.2500%" y="335.50">libdyld.dylib`start</text></g></svg></svg>